[
    {
        "label": "fastapi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fastapi",
        "description": "fastapi",
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "routes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "routes",
        "description": "routes",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "pydantic_schemas.user_create",
        "description": "pydantic_schemas.user_create",
        "isExtraImport": true,
        "detail": "pydantic_schemas.user_create",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "pydantic_schemas.user_login",
        "description": "pydantic_schemas.user_login",
        "isExtraImport": true,
        "detail": "pydantic_schemas.user_login",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "models.post",
        "description": "models.post",
        "isExtraImport": true,
        "detail": "models.post",
        "documentation": {}
    },
    {
        "label": "cloudinary",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary",
        "description": "cloudinary",
        "detail": "cloudinary",
        "documentation": {}
    },
    {
        "label": "cloudinary.uploader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary.uploader",
        "description": "cloudinary.uploader",
        "detail": "cloudinary.uploader",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "kind": 2,
        "importPath": "server.middleware.auth_middleware",
        "description": "server.middleware.auth_middleware",
        "peekOfCode": "def auth_middleware(x_auth_token = Header()):\n    try:\n        # get the user token from the Header\n        if not x_auth_token :\n            raise HTTPException(401, 'No auth token,access denied!')\n        # decode the token \n        verified_token = jwt.decode(x_auth_token,'password_key',['HS256'])\n        if not  verified_token:\n            raise HTTPException(401, 'Token verification failed,authorization')\n        # get the id from the token",
        "detail": "server.middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "server.models.base",
        "description": "server.models.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "server.models.base",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "server.models.post",
        "description": "server.models.post",
        "peekOfCode": "class Post(Base):\n    __tablename__ = 'posts'\n    id = Column(TEXT, primary_key=True)\n    caption = Column(TEXT)\n    post_media = Column(TEXT)\n    uid = Column(TEXT, ForeignKey(\"users.id\"))",
        "detail": "server.models.post",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "server.models.user",
        "description": "server.models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(TEXT,primary_key = True )\n    name = Column(VARCHAR(100))\n    email = Column(VARCHAR(100))\n    password = Column(LargeBinary)",
        "detail": "server.models.user",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "server.pydantic_schemas.user_create",
        "description": "server.pydantic_schemas.user_create",
        "peekOfCode": "class UserCreate(BaseModel):\n    name:str\n    email:str\n    password:str",
        "detail": "server.pydantic_schemas.user_create",
        "documentation": {}
    },
    {
        "label": "UserLogi",
        "kind": 6,
        "importPath": "server.pydantic_schemas.user_login",
        "description": "server.pydantic_schemas.user_login",
        "peekOfCode": "class UserLogin (BaseModel):\n    email : str\n    password : str",
        "detail": "server.pydantic_schemas.user_login",
        "documentation": {}
    },
    {
        "label": "signup_user",
        "kind": 2,
        "importPath": "server.routes.auth",
        "description": "server.routes.auth",
        "peekOfCode": "def signup_user(user : UserCreate,db :Session = Depends(get_db)):\n    print(user.name)\n    print(user.email)\n    print(user.password)\n    # extract data that coming from req\n    # check is user already exits in db\n    user_db = db.query(User).filter(User.email == user.email).first() \n    if user_db :\n        raise HTTPException(400,'User with the same email already exists!')\n    hashed_pw = bcrypt.hashpw(user.password.encode(),bcrypt.gensalt())",
        "detail": "server.routes.auth",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "server.routes.auth",
        "description": "server.routes.auth",
        "peekOfCode": "def login_user(user : UserLogin,db: Session = Depends(get_db)):\n    # check if user with same email already exits \n    user_db = db.query(User).filter(User.email == user.email).first()\n    if not user_db :\n        raise HTTPException(400,\"User with this email does not exits!\")\n    # password matching or not\n    is_match = bcrypt.hashpw(user.password.encode(),user_db.password)\n    if not is_match:\n        raise HTTPException(400,'Incorrect password!')\n    token = jwt.encode({'id': user_db.id}, 'password_key')",
        "detail": "server.routes.auth",
        "documentation": {}
    },
    {
        "label": "current_user_data",
        "kind": 2,
        "importPath": "server.routes.auth",
        "description": "server.routes.auth",
        "peekOfCode": "def current_user_data(db: Session=Depends(get_db), \n                     user_dict = Depends(auth_middleware)):\n    user = db.query(User).filter(User.id == user_dict['uid']).first()\n    if not user:\n        raise HTTPException(404,'User not found! ')\n    return user",
        "detail": "server.routes.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.routes.auth",
        "description": "server.routes.auth",
        "peekOfCode": "router = APIRouter()\n@router.post('/signup',status_code = 201 )\ndef signup_user(user : UserCreate,db :Session = Depends(get_db)):\n    print(user.name)\n    print(user.email)\n    print(user.password)\n    # extract data that coming from req\n    # check is user already exits in db\n    user_db = db.query(User).filter(User.email == user.email).first() \n    if user_db :",
        "detail": "server.routes.auth",
        "documentation": {}
    },
    {
        "label": "@router.post('/signup',status_code",
        "kind": 5,
        "importPath": "server.routes.auth",
        "description": "server.routes.auth",
        "peekOfCode": "@router.post('/signup',status_code = 201 )\ndef signup_user(user : UserCreate,db :Session = Depends(get_db)):\n    print(user.name)\n    print(user.email)\n    print(user.password)\n    # extract data that coming from req\n    # check is user already exits in db\n    user_db = db.query(User).filter(User.email == user.email).first() \n    if user_db :\n        raise HTTPException(400,'User with the same email already exists!')",
        "detail": "server.routes.auth",
        "documentation": {}
    },
    {
        "label": "upload_post",
        "kind": 2,
        "importPath": "server.routes.post",
        "description": "server.routes.post",
        "peekOfCode": "def upload_post(\n    caption :str= Form(...),\n    post_media:UploadFile = File(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    post_id = str(uuid.uuid4())\n    post_media_res = cloudinary.uploader.upload(\n        post_media.file,",
        "detail": "server.routes.post",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "server.routes.post",
        "description": "server.routes.post",
        "peekOfCode": "def get_posts(db: Session=Depends(get_db), \n               auth_details=Depends(auth_middleware)):\n    uid = auth_details['uid']\n    print(uid)\n    posts = db.query(Post).filter(Post.uid != uid).all()\n    return posts\n@router.get('/my_posts')\ndef get_my_posts(db: Session=Depends(get_db), \n               auth_details=Depends(auth_middleware)):\n    uid = auth_details['uid']",
        "detail": "server.routes.post",
        "documentation": {}
    },
    {
        "label": "get_my_posts",
        "kind": 2,
        "importPath": "server.routes.post",
        "description": "server.routes.post",
        "peekOfCode": "def get_my_posts(db: Session=Depends(get_db), \n               auth_details=Depends(auth_middleware)):\n    uid = auth_details['uid']\n    print(uid)\n    posts = db.query(Post).filter(Post.uid == uid).all()\n    return posts\n@router.put(\"/update_post/{post_id}\")\ndef update_post(\n    post_id: str,\n    caption :str= Form(...),",
        "detail": "server.routes.post",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "server.routes.post",
        "description": "server.routes.post",
        "peekOfCode": "def update_post(\n    post_id: str,\n    caption :str= Form(...),\n    post_media:UploadFile = File(...),\n    db: Session = Depends(get_db),\n    ):\n    post = db.query(Post).filter(Post.id == post_id).first()\n    if not post:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n    if caption:",
        "detail": "server.routes.post",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "server.routes.post",
        "description": "server.routes.post",
        "peekOfCode": "def delete_post(post_id: str, db: Session = Depends(get_db)):\n    post = db.query(Post).filter(Post.id == post_id).first()\n    if not post:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n    db.delete(post)\n    db.commit()\n    db.refresh(post)\n    return {\"message\": \"Post deleted successfully\"}",
        "detail": "server.routes.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "server.routes.post",
        "description": "server.routes.post",
        "peekOfCode": "router = APIRouter()\n# Configuration       \ncloudinary.config( \n    cloud_name = \"dppvl48gh\", \n    api_key = \"793662588633836\", \n    api_secret = \"fO8kYKe1uzTHNVspVrPVoP5CdwU\", # Click 'View API Keys' above to copy your API secret\n    secure=True\n)\n@router.post('/upload',status_code = 201)\ndef upload_post(",
        "detail": "server.routes.post",
        "documentation": {}
    },
    {
        "label": "@router.post('/upload',status_code",
        "kind": 5,
        "importPath": "server.routes.post",
        "description": "server.routes.post",
        "peekOfCode": "@router.post('/upload',status_code = 201)\ndef upload_post(\n    caption :str= Form(...),\n    post_media:UploadFile = File(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    post_id = str(uuid.uuid4())\n    post_media_res = cloudinary.uploader.upload(",
        "detail": "server.routes.post",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "server.database",
        "description": "server.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "server.database",
        "documentation": {}
    },
    {
        "label": "DATABASE_url",
        "kind": 5,
        "importPath": "server.database",
        "description": "server.database",
        "peekOfCode": "DATABASE_url = 'postgresql://postgres:root@localhost:5432/socialmediaapp'\nengine = create_engine(DATABASE_url)\nSessionLocal = sessionmaker(autocommit = False,autoflush = False,bind= engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "server.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "server.database",
        "description": "server.database",
        "peekOfCode": "engine = create_engine(DATABASE_url)\nSessionLocal = sessionmaker(autocommit = False,autoflush = False,bind= engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "server.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "server.database",
        "description": "server.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit = False,autoflush = False,bind= engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "server.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server.main",
        "description": "server.main",
        "peekOfCode": "app = FastAPI()\napp.include_router(auth.router,prefix='/auth')\napp.include_router(post.router,prefix='/post')\nBase.metadata.create_all(engine)",
        "detail": "server.main",
        "documentation": {}
    }
]