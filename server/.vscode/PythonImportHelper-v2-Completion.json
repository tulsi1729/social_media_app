[
    {
        "label": "fastapi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fastapi",
        "description": "fastapi",
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Header",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Body",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "File",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "routes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "routes",
        "description": "routes",
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "story",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "comment",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "like",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "reel",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "follow",
        "importPath": "routes",
        "description": "routes",
        "isExtraImport": true,
        "detail": "routes",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TEXT",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "VARCHAR",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "LargeBinary",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base",
        "description": "models.base",
        "isExtraImport": true,
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Like",
        "importPath": "models.like",
        "description": "models.like",
        "isExtraImport": true,
        "detail": "models.like",
        "documentation": {}
    },
    {
        "label": "Like",
        "importPath": "models.like",
        "description": "models.like",
        "isExtraImport": true,
        "detail": "models.like",
        "documentation": {}
    },
    {
        "label": "Like",
        "importPath": "models.like",
        "description": "models.like",
        "isExtraImport": true,
        "detail": "models.like",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "models.comment",
        "description": "models.comment",
        "isExtraImport": true,
        "detail": "models.comment",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "models.comment",
        "description": "models.comment",
        "isExtraImport": true,
        "detail": "models.comment",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "models.comment",
        "description": "models.comment",
        "isExtraImport": true,
        "detail": "models.comment",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "models.comment",
        "description": "models.comment",
        "isExtraImport": true,
        "detail": "models.comment",
        "documentation": {}
    },
    {
        "label": "Comment",
        "importPath": "models.comment",
        "description": "models.comment",
        "isExtraImport": true,
        "detail": "models.comment",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "isExtraImport": true,
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "pydantic_schemas.user_create",
        "description": "pydantic_schemas.user_create",
        "isExtraImport": true,
        "detail": "pydantic_schemas.user_create",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "database",
        "description": "database",
        "isExtraImport": true,
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "pydantic_schemas.user_login",
        "description": "pydantic_schemas.user_login",
        "isExtraImport": true,
        "detail": "pydantic_schemas.user_login",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "models.post",
        "description": "models.post",
        "isExtraImport": true,
        "detail": "models.post",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "models.post",
        "description": "models.post",
        "isExtraImport": true,
        "detail": "models.post",
        "documentation": {}
    },
    {
        "label": "Post",
        "importPath": "models.post",
        "description": "models.post",
        "isExtraImport": true,
        "detail": "models.post",
        "documentation": {}
    },
    {
        "label": "Follow",
        "importPath": "models.follow",
        "description": "models.follow",
        "isExtraImport": true,
        "detail": "models.follow",
        "documentation": {}
    },
    {
        "label": "current_user_data",
        "importPath": "routes.auth",
        "description": "routes.auth",
        "isExtraImport": true,
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "routes.auth",
        "description": "routes.auth",
        "isExtraImport": true,
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "create_post",
        "importPath": "routes.post",
        "description": "routes.post",
        "isExtraImport": true,
        "detail": "routes.post",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "cloudinary",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary",
        "description": "cloudinary",
        "detail": "cloudinary",
        "documentation": {}
    },
    {
        "label": "cloudinary.uploader",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cloudinary.uploader",
        "description": "cloudinary.uploader",
        "detail": "cloudinary.uploader",
        "documentation": {}
    },
    {
        "label": "Reel",
        "importPath": "models.reel",
        "description": "models.reel",
        "isExtraImport": true,
        "detail": "models.reel",
        "documentation": {}
    },
    {
        "label": "Story",
        "importPath": "models.story",
        "description": "models.story",
        "isExtraImport": true,
        "detail": "models.story",
        "documentation": {}
    },
    {
        "label": "auth_middleware",
        "kind": 2,
        "importPath": "middleware.auth_middleware",
        "description": "middleware.auth_middleware",
        "peekOfCode": "def auth_middleware(x_auth_token = Header()):\n    try:\n        # get the user token from the Header\n        if not x_auth_token :\n            raise HTTPException(401, 'No auth token,access denied!')\n        # decode the token \n        verified_token = jwt.decode(x_auth_token,'password_key',['HS256'])\n        if not  verified_token:\n            raise HTTPException(401, 'Token verification failed,authorization')\n        # get the id from the token",
        "detail": "middleware.auth_middleware",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "models.base",
        "description": "models.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "models.base",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "models.comment",
        "description": "models.comment",
        "peekOfCode": "class Comment(Base):\n    __tablename__  = 'comments'\n    id = Column(Integer, primary_key=True, autoincrement=True) \n    post_id = Column(TEXT,ForeignKey(\"posts.id\" ,ondelete='CASCADE'))\n    created_by = Column(TEXT, ForeignKey(\"users.id\"))\n    comment = Column(TEXT)\n    created_at = Column(DateTime)\n    # Relationship to fetch user details\n    user = relationship(\"User\", backref=\"comments\")",
        "detail": "models.comment",
        "documentation": {}
    },
    {
        "label": "Follow",
        "kind": 6,
        "importPath": "models.follow",
        "description": "models.follow",
        "peekOfCode": "class Follow(Base):\n    __tablename__ = 'follows'\n    id = Column(Integer, primary_key=True,autoincrement = True)\n    follower = Column(TEXT,ForeignKey(\"users.id\"))\n    following = Column(TEXT,ForeignKey(\"users.id\"))",
        "detail": "models.follow",
        "documentation": {}
    },
    {
        "label": "Like",
        "kind": 6,
        "importPath": "models.like",
        "description": "models.like",
        "peekOfCode": "class Like(Base):\n    __tablename__  = 'likes'\n    id = Column(Integer, primary_key=True, autoincrement=True) \n    post_id = Column(TEXT,ForeignKey(\"posts.id\" ,ondelete='CASCADE'))\n    liked_by = Column(TEXT, ForeignKey(\"users.id\"))",
        "detail": "models.like",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "models.post",
        "description": "models.post",
        "peekOfCode": "class Post(Base):\n    __tablename__ = 'posts'\n    id = Column(TEXT, primary_key=True)\n    caption = Column(TEXT)\n    image_url = Column(TEXT)    \n    uid = Column(TEXT, ForeignKey(\"users.id\"))\n    like = relationship(Like ,backref= 'posts' ,cascade=\"all, delete-orphan\",passive_deletes=True)\n    comment = relationship(Comment ,backref= 'posts' ,cascade=\"all, delete-orphan\",passive_deletes=True)",
        "detail": "models.post",
        "documentation": {}
    },
    {
        "label": "Reel",
        "kind": 6,
        "importPath": "models.reel",
        "description": "models.reel",
        "peekOfCode": "class Reel(Base) :\n    __tablename__ = 'reels'\n    id = Column(TEXT, primary_key=True)\n    uid = Column(TEXT, ForeignKey(\"users.id\"))\n    video_url = Column(TEXT) \n    caption = Column(TEXT)\n    created_on = Column(DateTime)",
        "detail": "models.reel",
        "documentation": {}
    },
    {
        "label": "Story",
        "kind": 6,
        "importPath": "models.story",
        "description": "models.story",
        "peekOfCode": "class Story(Base):\n    __tablename__ = 'stories'\n    id = Column(TEXT, primary_key=True)\n    image_url = Column(TEXT) \n    created_on = Column(DateTime)\n    views = Column(TEXT)\n    uid = Column(TEXT,ForeignKey(\"users.id\"))",
        "detail": "models.story",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.user",
        "description": "models.user",
        "peekOfCode": "class User(Base):\n    __tablename__ = 'users'\n    id = Column(TEXT,primary_key = True )\n    name = Column(VARCHAR(100))\n    email = Column(VARCHAR(100))\n    password = Column(LargeBinary)\n    profile_image = Column(TEXT,nullable=True)\n    bio = Column(TEXT,nullable=True)\n    user_name = Column(TEXT,nullable=True)",
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "pydantic_schemas.user_create",
        "description": "pydantic_schemas.user_create",
        "peekOfCode": "class UserCreate(BaseModel):\n    name:str\n    email:str\n    password:str\n    profile_image:Optional[str] = None\n    bio:Optional[str] = None \n    user_name:Optional[str] = None",
        "detail": "pydantic_schemas.user_create",
        "documentation": {}
    },
    {
        "label": "UserLogi",
        "kind": 6,
        "importPath": "pydantic_schemas.user_login",
        "description": "pydantic_schemas.user_login",
        "peekOfCode": "class UserLogin (BaseModel):\n    email : str\n    password : str",
        "detail": "pydantic_schemas.user_login",
        "documentation": {}
    },
    {
        "label": "signup_user",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def signup_user(user : UserCreate,db :Session = Depends(get_db)):\n    print(user.name)\n    print(user.email)\n    print(user.password)\n    user_db = db.query(User).filter(User.email == user.email).first() \n    if user_db :\n        raise HTTPException(400,'User with the same email already exists!')\n    hashed_pw = bcrypt.hashpw(user.password.encode(),bcrypt.gensalt())\n    user_db = User(\n        id= str(uuid.uuid4()),",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "login_user",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def login_user(user : UserLogin,db: Session = Depends(get_db)):\n    # check if user with same email already exits \n    user_db = db.query(User).filter(User.email == user.email).first()\n    if not user_db :\n        raise HTTPException(400,\"User with this email does not exits!\")\n    # password matching or not\n    is_match = bcrypt.hashpw(user.password.encode(),user_db.password)\n    if not is_match:\n        raise HTTPException(400,'Incorrect password!')\n    token = jwt.encode({'id': user_db.id}, 'password_key')",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "current_user_data",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def current_user_data(db: Session=Depends(get_db), \n                     user_dict = Depends(auth_middleware)):\n    user = db.query(User).filter(User.id == user_dict['uid']).first()\n    if not user:\n        raise HTTPException(404,'User not found! ')\n    return user\n@router.get('/get_user_lists')\ndef get_user_list(db: Session=Depends(get_db), \n                     user_dict = Depends(auth_middleware)):\n    user = db.query(User).all()",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "get_user_list",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def get_user_list(db: Session=Depends(get_db), \n                     user_dict = Depends(auth_middleware)):\n    user = db.query(User).all()\n    if not user:\n        raise HTTPException(404,'User not found! ')\n    return user\n@router.put(\"/update_user\")\ndef update_profile(\n    profile_image:str = Form(...),\n    user_name:str = Form(...),",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "update_profile",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def update_profile(\n    profile_image:str = Form(...),\n    user_name:str = Form(...),\n    bio:str = Form(...),\n    created_on: datetime = datetime.now(),  \n    db: Session = Depends(get_db),\n    auth_details=Depends(auth_middleware)):\n    uid = auth_details['uid']\n    user = db.query(User).filter(User.id == uid).first()\n    if not user:",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "get_profile",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def get_profile(\n    db: Session = Depends(get_db),\n    auth_details=Depends(auth_middleware)\n):\n    uid = auth_details['uid']\n    profile = db.query(User).filter(User.id == uid).all()\n    return {\"message\": \"user get successfully\", \"user\": profile}\n@router.get(\"/user/get_all_user\", status_code=200)\ndef get_profile(\n    db: Session = Depends(get_db),",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "get_profile",
        "kind": 2,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "def get_profile(\n    db: Session = Depends(get_db),\n    auth_details=Depends(auth_middleware)\n):\n    uid = auth_details['uid']\n    profile = db.query(User).filter(User.id != uid).all()\n    return {\"message\": \"user get successfully\", \"user\": profile}",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "router = APIRouter()\n@router.post('/signup',status_code = 201 )\ndef signup_user(user : UserCreate,db :Session = Depends(get_db)):\n    print(user.name)\n    print(user.email)\n    print(user.password)\n    user_db = db.query(User).filter(User.email == user.email).first() \n    if user_db :\n        raise HTTPException(400,'User with the same email already exists!')\n    hashed_pw = bcrypt.hashpw(user.password.encode(),bcrypt.gensalt())",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "@router.post('/signup',status_code",
        "kind": 5,
        "importPath": "routes.auth",
        "description": "routes.auth",
        "peekOfCode": "@router.post('/signup',status_code = 201 )\ndef signup_user(user : UserCreate,db :Session = Depends(get_db)):\n    print(user.name)\n    print(user.email)\n    print(user.password)\n    user_db = db.query(User).filter(User.email == user.email).first() \n    if user_db :\n        raise HTTPException(400,'User with the same email already exists!')\n    hashed_pw = bcrypt.hashpw(user.password.encode(),bcrypt.gensalt())\n    user_db = User(",
        "detail": "routes.auth",
        "documentation": {}
    },
    {
        "label": "create_comment",
        "kind": 2,
        "importPath": "routes.comment",
        "description": "routes.comment",
        "peekOfCode": "def create_comment(\n    post_id: str = Form(...),\n    comment: str = Form(...),\n    created_at: datetime = datetime.now(),  \n    db: Session = Depends(get_db),\n    auth_details=Depends(auth_middleware)\n):\n    # Validate post_id\n    post = db.query(Post).filter(Post.id == post_id).first()\n    if not post:",
        "detail": "routes.comment",
        "documentation": {}
    },
    {
        "label": "get_comments",
        "kind": 2,
        "importPath": "routes.comment",
        "description": "routes.comment",
        "peekOfCode": "def get_comments(post_id : str, db: Session = Depends(get_db)):\n    # Query to fetch comments for a specific post_id\n    comments = db.query(Comment).options(joinedload(Comment.user)).filter(Comment.post_id == post_id).all()\n    if not comments:\n        raise HTTPException(status_code=404, detail=\"No comments found for this post\")\n    return [\n        {\n            \"id\": comment.id,\n            \"comment\": comment.comment,\n            \"post_id\": comment.post_id,",
        "detail": "routes.comment",
        "documentation": {}
    },
    {
        "label": "delete_comment",
        "kind": 2,
        "importPath": "routes.comment",
        "description": "routes.comment",
        "peekOfCode": "def delete_comment(comment_id: str, db: Session = Depends(get_db)):\n    comment = db.query(Comment).filter(Comment.id == comment_id).one()\n    if not comment:\n        raise HTTPException(status_code=404, detail=\"Comment not found\")\n    db.delete(comment)\n    db.commit()\n    return {\"message\": \"Comment deleted successfully\"}\n@router.get(\"/post_comments_count/{post_id}\")\ndef get_post_comment_counts(post_id: str, db: Session = Depends(get_db)):\n    post_comments_count = db.query(Comment).filter(Comment.post_id == post_id).count()",
        "detail": "routes.comment",
        "documentation": {}
    },
    {
        "label": "get_post_comment_counts",
        "kind": 2,
        "importPath": "routes.comment",
        "description": "routes.comment",
        "peekOfCode": "def get_post_comment_counts(post_id: str, db: Session = Depends(get_db)):\n    post_comments_count = db.query(Comment).filter(Comment.post_id == post_id).count()\n    return {\"post_comment_counts\": post_comments_count}",
        "detail": "routes.comment",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.comment",
        "description": "routes.comment",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/create_comment\") \ndef create_comment(\n    post_id: str = Form(...),\n    comment: str = Form(...),\n    created_at: datetime = datetime.now(),  \n    db: Session = Depends(get_db),\n    auth_details=Depends(auth_middleware)\n):\n    # Validate post_id",
        "detail": "routes.comment",
        "documentation": {}
    },
    {
        "label": "get_follow_counts",
        "kind": 2,
        "importPath": "routes.follow",
        "description": "routes.follow",
        "peekOfCode": "def get_follow_counts(user_id: str, db: Session = Depends(get_db)):\n    follower_count = db.query(Follow).filter(Follow.following == user_id).count()\n    following_count = db.query(Follow).filter(Follow.follower == user_id).count()\n    return {\"follower_count\": follower_count, \"following_count\": following_count}\n@router.post(\"/{target_user_id}\")\ndef follow_user(\n    target_user_id: str,\n    db: Session = Depends(get_db),\n    auth_details= Depends(auth_middleware),):\n    uid = auth_details['uid']",
        "detail": "routes.follow",
        "documentation": {}
    },
    {
        "label": "follow_user",
        "kind": 2,
        "importPath": "routes.follow",
        "description": "routes.follow",
        "peekOfCode": "def follow_user(\n    target_user_id: str,\n    db: Session = Depends(get_db),\n    auth_details= Depends(auth_middleware),):\n    uid = auth_details['uid']\n    if uid == target_user_id:\n        raise HTTPException(status_code=400, detail=\"You cannot follow yourself.\")\n    user_to_follow = db.query(User).filter(User.id == target_user_id).first()\n    if not user_to_follow:\n        raise HTTPException(status_code=404, detail=\"User not found.\")",
        "detail": "routes.follow",
        "documentation": {}
    },
    {
        "label": "unfollow_user",
        "kind": 2,
        "importPath": "routes.follow",
        "description": "routes.follow",
        "peekOfCode": "def unfollow_user(\n    target_user_id: str,\n    db: Session = Depends(get_db),\n    auth_details= Depends(auth_middleware),\n):\n    uid = auth_details['uid']\n    # Check if the user is trying to unfollow themselves\n    if uid == target_user_id:\n        raise HTTPException(status_code=400, detail=\"You cannot unfollow yourself.\")\n    # Check if the target user exists",
        "detail": "routes.follow",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.follow",
        "description": "routes.follow",
        "peekOfCode": "router = APIRouter()\n@router.get(\"/user/follow_counts/{user_id}\")\ndef get_follow_counts(user_id: str, db: Session = Depends(get_db)):\n    follower_count = db.query(Follow).filter(Follow.following == user_id).count()\n    following_count = db.query(Follow).filter(Follow.follower == user_id).count()\n    return {\"follower_count\": follower_count, \"following_count\": following_count}\n@router.post(\"/{target_user_id}\")\ndef follow_user(\n    target_user_id: str,\n    db: Session = Depends(get_db),",
        "detail": "routes.follow",
        "documentation": {}
    },
    {
        "label": "create_like",
        "kind": 2,
        "importPath": "routes.like",
        "description": "routes.like",
        "peekOfCode": "def create_like(\n    post_id: str = Form(...),  \n    db: Session = Depends(get_db),\n    auth_details= Depends(auth_middleware)\n):\n    uid = auth_details['uid']\n    like = db.query(Like).filter(Like.liked_by == uid, Like.post_id == post_id).first()\n    if like:\n        db.delete(like)\n        db.commit()",
        "detail": "routes.like",
        "documentation": {}
    },
    {
        "label": "get_likes",
        "kind": 2,
        "importPath": "routes.like",
        "description": "routes.like",
        "peekOfCode": "def get_likes(post_id: str = Form(...), db: Session = Depends(get_db)):\n    likes = db.query(Like).filter(Like.post_id == post_id).first()\n    return {\"likes\": likes}\n@router.get(\"/is_liked/{post_id}\")\ndef get_likes(post_id: str, db: Session = Depends(get_db),auth_details= Depends(auth_middleware)):\n    uid = auth_details['uid']\n    print(uid)\n    rows_count = db.query(Like).filter(Like.post_id == post_id , Like.liked_by == uid).count() \n    return {\"is_liked\": rows_count > 0}\n@router.get(\"/post_likes_count/{post_id}\")",
        "detail": "routes.like",
        "documentation": {}
    },
    {
        "label": "get_likes",
        "kind": 2,
        "importPath": "routes.like",
        "description": "routes.like",
        "peekOfCode": "def get_likes(post_id: str, db: Session = Depends(get_db),auth_details= Depends(auth_middleware)):\n    uid = auth_details['uid']\n    print(uid)\n    rows_count = db.query(Like).filter(Like.post_id == post_id , Like.liked_by == uid).count() \n    return {\"is_liked\": rows_count > 0}\n@router.get(\"/post_likes_count/{post_id}\")\ndef get_post_like_counts(post_id: str, db: Session = Depends(get_db)):\n    post_likes_count = db.query(Like).filter(Like.post_id == post_id).count()\n    return {\"post_likes_count\": post_likes_count}",
        "detail": "routes.like",
        "documentation": {}
    },
    {
        "label": "get_post_like_counts",
        "kind": 2,
        "importPath": "routes.like",
        "description": "routes.like",
        "peekOfCode": "def get_post_like_counts(post_id: str, db: Session = Depends(get_db)):\n    post_likes_count = db.query(Like).filter(Like.post_id == post_id).count()\n    return {\"post_likes_count\": post_likes_count}",
        "detail": "routes.like",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.like",
        "description": "routes.like",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/create_like\")\ndef create_like(\n    post_id: str = Form(...),  \n    db: Session = Depends(get_db),\n    auth_details= Depends(auth_middleware)\n):\n    uid = auth_details['uid']\n    like = db.query(Like).filter(Like.liked_by == uid, Like.post_id == post_id).first()\n    if like:",
        "detail": "routes.like",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "routes.post",
        "description": "routes.post",
        "peekOfCode": "def create_post(\n    caption :str= Form(...),\n    image_url: str = Form(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    post_id = str(uuid.uuid4())\n    new_post = Post(\n        id=post_id,",
        "detail": "routes.post",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "routes.post",
        "description": "routes.post",
        "peekOfCode": "def get_posts(db: Session=Depends(get_db), \n               auth_details=Depends(auth_middleware)):\n    uid = auth_details['uid']\n    print(uid)\n    posts = db.query(Post).filter(Post.uid != uid).all()\n    return posts\n@router.get('/my_posts')\ndef get_my_posts(db: Session=Depends(get_db), \n               auth_details=Depends(auth_middleware)):\n    uid = auth_details['uid']",
        "detail": "routes.post",
        "documentation": {}
    },
    {
        "label": "get_my_posts",
        "kind": 2,
        "importPath": "routes.post",
        "description": "routes.post",
        "peekOfCode": "def get_my_posts(db: Session=Depends(get_db), \n               auth_details=Depends(auth_middleware)):\n    uid = auth_details['uid']\n    print(uid)\n    posts = db.query(Post).filter(Post.uid == uid).all()\n    return posts\n@router.put(\"/edit_post/{post_id}\")\ndef edit_post(\n    post_id: str,\n    caption :str= Form(...),",
        "detail": "routes.post",
        "documentation": {}
    },
    {
        "label": "edit_post",
        "kind": 2,
        "importPath": "routes.post",
        "description": "routes.post",
        "peekOfCode": "def edit_post(\n    post_id: str,\n    caption :str= Form(...),\n    image_url:str = Form(...),\n    db: Session = Depends(get_db),\n    ):\n    post = db.query(Post).filter(Post.id == post_id).first()\n    if not post:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n    if caption:",
        "detail": "routes.post",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "routes.post",
        "description": "routes.post",
        "peekOfCode": "def delete_post(post_id: str, db: Session = Depends(get_db)):\n    post = db.query(Post).filter(Post.id == post_id).first()\n    if not post:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n    db.delete(post)\n    db.commit()\n    return {\"message\": \"Post deleted successfully\"}\n@router.get(\"/post_counts/{user_id}\")\ndef get_post_counts(user_id: str, db: Session = Depends(get_db)):\n    post_counts = db.query(Post).filter(Post.uid == user_id).count()",
        "detail": "routes.post",
        "documentation": {}
    },
    {
        "label": "get_post_counts",
        "kind": 2,
        "importPath": "routes.post",
        "description": "routes.post",
        "peekOfCode": "def get_post_counts(user_id: str, db: Session = Depends(get_db)):\n    post_counts = db.query(Post).filter(Post.uid == user_id).count()\n    return {\"post_counts\": post_counts}",
        "detail": "routes.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.post",
        "description": "routes.post",
        "peekOfCode": "router = APIRouter()\n@router.post('/create_post',status_code = 201)\ndef create_post(\n    caption :str= Form(...),\n    image_url: str = Form(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    post_id = str(uuid.uuid4())",
        "detail": "routes.post",
        "documentation": {}
    },
    {
        "label": "@router.post('/create_post',status_code",
        "kind": 5,
        "importPath": "routes.post",
        "description": "routes.post",
        "peekOfCode": "@router.post('/create_post',status_code = 201)\ndef create_post(\n    caption :str= Form(...),\n    image_url: str = Form(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    post_id = str(uuid.uuid4())\n    new_post = Post(",
        "detail": "routes.post",
        "documentation": {}
    },
    {
        "label": "create_reel",
        "kind": 2,
        "importPath": "routes.reel",
        "description": "routes.reel",
        "peekOfCode": "def create_reel(\n    caption :str= Form(...),\n    video_url: str = Form(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    reel_id = str(uuid.uuid4())\n    created_on =datetime.now()\n    new_reel = Reel(",
        "detail": "routes.reel",
        "documentation": {}
    },
    {
        "label": "get_reels",
        "kind": 2,
        "importPath": "routes.reel",
        "description": "routes.reel",
        "peekOfCode": "def get_reels(\n    db: Session = Depends(get_db),\n    auth_details=Depends(auth_middleware)\n):\n    reels = db.query(Reel).all()\n    return {\"message\": \"Reels get successfully\", \"reels\": reels}\n@router.delete(\"/delete_reel/{reel_id}\")\ndef delete_reel(reel_id: str, db: Session = Depends(get_db)):\n    reel = db.query(Reel).filter(Reel.id == reel_id).first()\n    if not reel:",
        "detail": "routes.reel",
        "documentation": {}
    },
    {
        "label": "delete_reel",
        "kind": 2,
        "importPath": "routes.reel",
        "description": "routes.reel",
        "peekOfCode": "def delete_reel(reel_id: str, db: Session = Depends(get_db)):\n    reel = db.query(Reel).filter(Reel.id == reel_id).first()\n    if not reel:\n        raise HTTPException(status_code=404, detail=\"Post not found\")\n    db.delete(reel)\n    db.commit()\n    return {\"message\": \"Reel deleted successfully\"}",
        "detail": "routes.reel",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.reel",
        "description": "routes.reel",
        "peekOfCode": "router = APIRouter()\n@router.post('/create_reel',status_code = 201)\ndef create_reel(\n    caption :str= Form(...),\n    video_url: str = Form(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    reel_id = str(uuid.uuid4())",
        "detail": "routes.reel",
        "documentation": {}
    },
    {
        "label": "@router.post('/create_reel',status_code",
        "kind": 5,
        "importPath": "routes.reel",
        "description": "routes.reel",
        "peekOfCode": "@router.post('/create_reel',status_code = 201)\ndef create_reel(\n    caption :str= Form(...),\n    video_url: str = Form(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    reel_id = str(uuid.uuid4())\n    created_on =datetime.now()",
        "detail": "routes.reel",
        "documentation": {}
    },
    {
        "label": "create_story",
        "kind": 2,
        "importPath": "routes.story",
        "description": "routes.story",
        "peekOfCode": "def create_story(\n    image_url: str = Form(...),\n    views :str= Form(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    story_id = str(uuid.uuid4())   \n    created_on =datetime.now()\n    new_story = Story(",
        "detail": "routes.story",
        "documentation": {}
    },
    {
        "label": "get_stories",
        "kind": 2,
        "importPath": "routes.story",
        "description": "routes.story",
        "peekOfCode": "def get_stories(\n    db: Session = Depends(get_db),\n    auth_details=Depends(auth_middleware)\n):\n    uid = auth_details['uid']\n    yesterday = datetime.now() - timedelta(days = 1)\n    query = (\n       select(Story)\n        .where(Story.created_on > yesterday)\n        .where(Story.uid == uid)",
        "detail": "routes.story",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "routes.story",
        "description": "routes.story",
        "peekOfCode": "router = APIRouter()\n@router.post('/create_story',status_code = 201)\ndef create_story(\n    image_url: str = Form(...),\n    views :str= Form(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    story_id = str(uuid.uuid4())   ",
        "detail": "routes.story",
        "documentation": {}
    },
    {
        "label": "@router.post('/create_story',status_code",
        "kind": 5,
        "importPath": "routes.story",
        "description": "routes.story",
        "peekOfCode": "@router.post('/create_story',status_code = 201)\ndef create_story(\n    image_url: str = Form(...),\n    views :str= Form(...),\n    db:Session= Depends(get_db),\n    auth_details= Depends(auth_middleware)\n    ):\n    uid = auth_details['uid']\n    story_id = str(uuid.uuid4())   \n    created_on =datetime.now()",
        "detail": "routes.story",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "DATABASE_url",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "DATABASE_url = 'postgresql://postgres:root@localhost:5432/socialmediaapp'\nengine = create_engine(DATABASE_url)\nSessionLocal = sessionmaker(autocommit = False,autoflush = False,bind= engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "engine = create_engine(DATABASE_url)\nSessionLocal = sessionmaker(autocommit = False,autoflush = False,bind= engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "database",
        "description": "database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit = False,autoflush = False,bind= engine)\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI()\napp.include_router(auth.router,prefix='/auth')\napp.include_router(post.router,prefix='/post')\napp.include_router(like.router,prefix='/like')\napp.include_router(comment.router,prefix='/comment')\napp.include_router(story.router,prefix='/story')\napp.include_router(reel.router,prefix='/reel')\napp.include_router(follow.router,prefix='/follow')\nBase.metadata.create_all(engine)",
        "detail": "main",
        "documentation": {}
    }
]